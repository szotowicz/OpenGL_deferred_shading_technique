#include "OpenGLFunctions.h"
#include "GlobalVariables.h"
#include "GeometryCreation.h"
#include <vector>

float sphere_vertices [][3] = {
    { -0.000000f, 1.000000f, -0.000000f },
    { -0.000000f, 0.923880f, -0.382684f },
    { -0.146444f, 0.923880f, -0.353556f },
    { -0.270596f, 0.923880f, -0.270600f },
    { -0.353552f, 0.923880f, -0.146448f },
    { -0.382680f, 0.923880f, -0.000000f },
    { -0.353552f, 0.923880f, 0.146444f },
    { -0.270596f, 0.923880f, 0.270596f },
    { -0.146444f, 0.923880f, 0.353552f },
    { -0.000000f, 0.923880f, 0.382680f },
    { 0.146448f, 0.923880f, 0.353552f },
    { 0.270600f, 0.923880f, 0.270596f },
    { 0.353556f, 0.923880f, 0.146444f },
    { 0.382684f, 0.923880f, -0.000000f },
    { 0.353556f, 0.923880f, -0.146448f },
    { 0.270600f, 0.923880f, -0.270600f },
    { 0.146448f, 0.923880f, -0.353556f },
    { -0.000000f, 0.707108f, -0.707108f },
    { -0.270596f, 0.707108f, -0.653284f },
    { -0.500000f, 0.707108f, -0.500000f },
    { -0.653280f, 0.707108f, -0.270600f },
    { -0.707104f, 0.707108f, -0.000000f },
    { -0.653280f, 0.707108f, 0.270596f },
    { -0.500000f, 0.707108f, 0.500000f },
    { -0.270596f, 0.707108f, 0.653280f },
    { -0.000000f, 0.707108f, 0.707104f },
    { 0.270600f, 0.707108f, 0.653280f },
    { 0.500004f, 0.707108f, 0.500000f },
    { 0.653284f, 0.707108f, 0.270596f },
    { 0.707108f, 0.707108f, -0.000004f },
    { 0.653284f, 0.707108f, -0.270600f },
    { 0.500000f, 0.707108f, -0.500004f },
    { 0.270600f, 0.707108f, -0.653284f },
    { -0.000000f, 0.382684f, -0.923880f },
    { -0.353552f, 0.382684f, -0.853556f },
    { -0.653280f, 0.382684f, -0.653284f },
    { -0.853552f, 0.382684f, -0.353556f },
    { -0.923876f, 0.382684f, -0.000000f },
    { -0.853552f, 0.382684f, 0.353552f },
    { -0.653280f, 0.382684f, 0.653280f },
    { -0.353552f, 0.382684f, 0.853552f },
    { -0.000000f, 0.382684f, 0.923876f },
    { 0.353556f, 0.382684f, 0.853552f },
    { 0.653284f, 0.382684f, 0.653280f },
    { 0.853556f, 0.382684f, 0.353552f },
    { 0.923880f, 0.382684f, -0.000004f },
    { 0.853556f, 0.382684f, -0.353556f },
    { 0.653284f, 0.382684f, -0.653284f },
    { 0.353556f, 0.382684f, -0.853556f },
    { -0.000000f, 0.000000f, -1.000000f },
    { -0.382680f, 0.000000f, -0.923880f },
    { -0.707104f, 0.000000f, -0.707108f },
    { -0.923876f, 0.000000f, -0.382684f },
    { -1.000000f, 0.000000f, -0.000000f },
    { -0.923876f, 0.000000f, 0.382680f },
    { -0.707104f, 0.000000f, 0.707104f },
    { -0.382680f, 0.000000f, 0.923876f },
    { -0.000000f, 0.000000f, 1.000000f },
    { 0.382684f, 0.000000f, 0.923876f },
    { 0.707108f, 0.000000f, 0.707104f },
    { 0.923880f, 0.000000f, 0.382680f },
    { 1.000000f, 0.000000f, -0.000004f },
    { 0.923880f, 0.000000f, -0.382684f },
    { 0.707108f, 0.000000f, -0.707108f },
    { 0.382684f, 0.000000f, -0.923880f },
    { -0.000000f, -0.382684f, -0.923880f },
    { -0.353552f, -0.382684f, -0.853556f },
    { -0.653280f, -0.382684f, -0.653284f },
    { -0.853552f, -0.382684f, -0.353556f },
    { -0.923876f, -0.382684f, -0.000000f },
    { -0.853552f, -0.382684f, 0.353552f },
    { -0.653280f, -0.382684f, 0.653280f },
    { -0.353552f, -0.382684f, 0.853552f },
    { -0.000000f, -0.382684f, 0.923876f },
    { 0.353556f, -0.382684f, 0.853552f },
    { 0.653284f, -0.382684f, 0.653280f },
    { 0.853556f, -0.382684f, 0.353552f },
    { 0.923880f, -0.382684f, -0.000004f },
    { 0.853556f, -0.382684f, -0.353556f },
    { 0.653284f, -0.382684f, -0.653284f },
    { 0.353556f, -0.382684f, -0.853556f },
    { -0.000000f, -0.707108f, -0.707108f },
    { -0.270596f, -0.707108f, -0.653284f },
    { -0.500000f, -0.707108f, -0.500000f },
    { -0.653280f, -0.707108f, -0.270600f },
    { -0.707104f, -0.707108f, -0.000000f },
    { -0.653280f, -0.707108f, 0.270596f },
    { -0.500000f, -0.707108f, 0.500000f },
    { -0.270596f, -0.707108f, 0.653280f },
    { -0.000000f, -0.707108f, 0.707104f },
    { 0.270600f, -0.707108f, 0.653280f },
    { 0.500004f, -0.707108f, 0.500000f },
    { 0.653284f, -0.707108f, 0.270596f },
    { 0.707108f, -0.707108f, -0.000004f },
    { 0.653284f, -0.707108f, -0.270600f },
    { 0.500000f, -0.707108f, -0.500004f },
    { 0.270600f, -0.707108f, -0.653284f },
    { -0.000000f, -0.923880f, -0.382684f },
    { -0.146444f, -0.923880f, -0.353556f },
    { -0.270596f, -0.923880f, -0.270600f },
    { -0.353552f, -0.923880f, -0.146448f },
    { -0.382680f, -0.923880f, -0.000000f },
    { -0.353552f, -0.923880f, 0.146444f },
    { -0.270596f, -0.923880f, 0.270596f },
    { -0.146444f, -0.923880f, 0.353552f },
    { -0.000000f, -0.923880f, 0.382680f },
    { 0.146448f, -0.923880f, 0.353552f },
    { 0.270600f, -0.923880f, 0.270596f },
    { 0.353556f, -0.923880f, 0.146444f },
    { 0.382684f, -0.923880f, -0.000000f },
    { 0.353556f, -0.923880f, -0.146448f },
    { 0.270600f, -0.923880f, -0.270600f },
    { 0.146448f, -0.923880f, -0.353556f },
    { -0.000000f, -1.000000f, -0.000000f },
};

float sphere_normals [][3] = {
    { -0.000001f, 1.000000f, 0.000001f },
    { 0.022463f, 0.907921f, -0.418539f },
    { -0.139412f, 0.907921f, -0.395276f },
    { -0.280067f, 0.907921f, -0.311836f },
    { -0.378083f, 0.907921f, -0.180920f },
    { -0.418540f, 0.907921f, -0.022463f },
    { -0.395276f, 0.907921f, 0.139412f },
    { -0.311836f, 0.907921f, 0.280066f },
    { -0.180919f, 0.907921f, 0.378083f },
    { -0.022464f, 0.907921f, 0.418539f },
    { 0.139411f, 0.907921f, 0.395276f },
    { 0.280065f, 0.907922f, 0.311836f },
    { 0.378083f, 0.907922f, 0.180919f },
    { 0.418539f, 0.907921f, 0.022464f },
    { 0.395275f, 0.907922f, -0.139411f },
    { 0.311835f, 0.907921f, -0.280067f },
    { 0.180919f, 0.907921f, -0.378083f },
    { 0.009151f, 0.707599f, -0.706555f },
    { -0.261931f, 0.707599f, -0.656274f },
    { -0.493139f, 0.707600f, -0.506080f },
    { -0.649270f, 0.707600f, -0.278839f },
    { -0.706555f, 0.707599f, -0.009151f },
    { -0.656274f, 0.707600f, 0.261929f },
    { -0.506080f, 0.707600f, 0.493138f },
    { -0.278838f, 0.707599f, 0.649271f },
    { -0.009153f, 0.707599f, 0.706555f },
    { 0.261928f, 0.707600f, 0.656275f },
    { 0.493138f, 0.707600f, 0.506080f },
    { 0.649271f, 0.707599f, 0.278838f },
    { 0.706555f, 0.707599f, 0.009151f },
    { 0.656274f, 0.707599f, -0.261931f },
    { 0.506080f, 0.707600f, -0.493139f },
    { 0.278839f, 0.707600f, -0.649270f },
    { 0.004888f, 0.383153f, -0.923672f },
    { -0.348957f, 0.383153f, -0.855233f },
    { -0.649678f, 0.383153f, -0.656592f },
    { -0.851493f, 0.383152f, -0.357987f },
    { -0.923671f, 0.383156f, -0.004890f },
    { -0.855232f, 0.383153f, 0.348957f },
    { -0.656591f, 0.383151f, 0.649679f },
    { -0.357988f, 0.383152f, 0.851492f },
    { -0.004892f, 0.383156f, 0.923671f },
    { 0.348956f, 0.383153f, 0.855233f },
    { 0.649679f, 0.383151f, 0.656591f },
    { 0.851493f, 0.383152f, 0.357987f },
    { 0.923672f, 0.383153f, 0.004888f },
    { 0.855233f, 0.383153f, -0.348957f },
    { 0.656592f, 0.383153f, -0.649678f },
    { 0.357987f, 0.383152f, -0.851493f },
    { -0.000001f, 0.000000f, -1.000000f },
    { -0.382682f, -0.000001f, -0.923880f },
    { -0.707107f, 0.000000f, -0.707107f },
    { -0.923879f, 0.000002f, -0.382684f },
    { -1.000000f, 0.000000f, 0.000001f },
    { -0.923879f, -0.000002f, 0.382685f },
    { -0.707107f, -0.000000f, 0.707107f },
    { -0.382685f, 0.000002f, 0.923879f },
    { -0.000001f, -0.000000f, 1.000000f },
    { 0.382684f, -0.000002f, 0.923879f },
    { 0.707107f, 0.000000f, 0.707107f },
    { 0.923880f, 0.000001f, 0.382681f },
    { 1.000000f, 0.000000f, -0.000001f },
    { 0.923880f, -0.000001f, -0.382682f },
    { 0.707107f, -0.000000f, -0.707107f },
    { 0.382681f, 0.000001f, -0.923880f },
    { -0.004890f, -0.383153f, -0.923672f },
    { -0.357988f, -0.383152f, -0.851492f },
    { -0.656592f, -0.383153f, -0.649678f },
    { -0.855232f, -0.383154f, -0.348957f },
    { -0.923671f, -0.383156f, 0.004892f },
    { -0.851492f, -0.383152f, 0.357988f },
    { -0.649679f, -0.383151f, 0.656591f },
    { -0.348957f, -0.383153f, 0.855232f },
    { 0.004890f, -0.383156f, 0.923671f },
    { 0.357987f, -0.383152f, 0.851493f },
    { 0.656591f, -0.383151f, 0.649679f },
    { 0.855234f, -0.383152f, 0.348955f },
    { 0.923672f, -0.383153f, -0.004890f },
    { 0.851492f, -0.383152f, -0.357988f },
    { 0.649678f, -0.383153f, -0.656592f },
    { 0.348956f, -0.383153f, -0.855233f },
    { -0.009153f, -0.707599f, -0.706555f },
    { -0.278841f, -0.707600f, -0.649269f },
    { -0.506081f, -0.707600f, -0.493138f },
    { -0.656274f, -0.707600f, -0.261930f },
    { -0.706555f, -0.707599f, 0.009153f },
    { -0.649271f, -0.707599f, 0.278838f },
    { -0.493138f, -0.707600f, 0.506080f },
    { -0.261928f, -0.707600f, 0.656274f },
    { 0.009151f, -0.707599f, 0.706555f },
    { 0.278837f, -0.707599f, 0.649271f },
    { 0.506080f, -0.707600f, 0.493138f },
    { 0.656275f, -0.707600f, 0.261928f },
    { 0.706555f, -0.707599f, -0.009152f },
    { 0.649269f, -0.707600f, -0.278840f },
    { 0.493138f, -0.707600f, -0.506081f },
    { 0.261929f, -0.707600f, -0.656274f },
    { -0.022464f, -0.907921f, -0.418539f },
    { -0.180921f, -0.907921f, -0.378083f },
    { -0.311836f, -0.907921f, -0.280067f },
    { -0.395276f, -0.907921f, -0.139411f },
    { -0.418539f, -0.907921f, 0.022464f },
    { -0.378083f, -0.907921f, 0.180919f },
    { -0.280066f, -0.907921f, 0.311836f },
    { -0.139412f, -0.907921f, 0.395276f },
    { 0.022463f, -0.907921f, 0.418540f },
    { 0.180918f, -0.907921f, 0.378083f },
    { 0.311836f, -0.907922f, 0.280065f },
    { 0.395276f, -0.907921f, 0.139412f },
    { 0.418539f, -0.907921f, -0.022463f },
    { 0.378083f, -0.907921f, -0.180920f },
    { 0.280067f, -0.907921f, -0.311836f },
    { 0.139411f, -0.907922f, -0.395276f },
    { -0.000001f, -1.000000f, 0.000001f },
};

float sphere_texcoords [][2] = {
    { 1.413100f, 0.010200f },
    { 1.413100f, 0.133300f },
    { 1.289900f, 0.133300f },
    { 1.289900f, 0.010200f },
    { 1.166800f, 0.133300f },
    { 1.166800f, 0.010200f },
    { 1.043700f, 0.133300f },
    { 1.043700f, 0.010200f },
    { 0.920600f, 0.133300f },
    { 0.920600f, 0.010200f },
    { 0.797400f, 0.133300f },
    { 0.797400f, 0.010200f },
    { 0.674300f, 0.133300f },
    { 0.674300f, 0.010200f },
    { 0.551200f, 0.133300f },
    { 0.551200f, 0.010200f },
    { 0.428100f, 0.133300f },
    { 0.428100f, 0.010200f },
    { 0.304900f, 0.133300f },
    { 0.304900f, 0.010200f },
    { 0.181800f, 0.133300f },
    { 0.181800f, 0.010200f },
    { 0.058700f, 0.133300f },
    { 0.058700f, 0.010200f },
    { -0.064400f, 0.133300f },
    { -0.064400f, 0.010200f },
    { -0.187600f, 0.133300f },
    { -0.187600f, 0.010200f },
    { -0.310700f, 0.133300f },
    { -0.310700f, 0.010200f },
    { -0.433800f, 0.133300f },
    { -0.433800f, 0.010200f },
    { -0.556900f, 0.133300f },
    { 1.413100f, 0.256400f },
    { 1.289900f, 0.256400f },
    { 1.166800f, 0.256400f },
    { 1.043700f, 0.256400f },
    { 0.920600f, 0.256400f },
    { 0.797400f, 0.256400f },
    { 0.674300f, 0.256400f },
    { 0.551200f, 0.256400f },
    { 0.428100f, 0.256400f },
    { 0.304900f, 0.256400f },
    { 0.181800f, 0.256400f },
    { 0.058700f, 0.256400f },
    { -0.064400f, 0.256400f },
    { -0.187600f, 0.256400f },
    { -0.310700f, 0.256400f },
    { -0.433800f, 0.256400f },
    { -0.556900f, 0.256400f },
    { 1.413100f, 0.379500f },
    { 1.289900f, 0.379500f },
    { 1.166800f, 0.379500f },
    { 1.043700f, 0.379500f },
    { 0.920600f, 0.379500f },
    { 0.797400f, 0.379500f },
    { 0.674300f, 0.379500f },
    { 0.551200f, 0.379500f },
    { 0.428100f, 0.379500f },
    { 0.304900f, 0.379500f },
    { 0.181800f, 0.379500f },
    { 0.058700f, 0.379500f },
    { -0.064400f, 0.379500f },
    { -0.187600f, 0.379500f },
    { -0.310700f, 0.379500f },
    { -0.433800f, 0.379500f },
    { -0.556900f, 0.379500f },
    { 1.413100f, 0.502700f },
    { 1.289900f, 0.502700f },
    { 1.166800f, 0.502700f },
    { 1.043700f, 0.502700f },
    { 0.920600f, 0.502700f },
    { 0.797400f, 0.502700f },
    { 0.674300f, 0.502700f },
    { 0.551200f, 0.502700f },
    { 0.428100f, 0.502700f },
    { 0.304900f, 0.502700f },
    { 0.181800f, 0.502700f },
    { 0.058700f, 0.502700f },
    { -0.064400f, 0.502700f },
    { -0.187600f, 0.502700f },
    { -0.310700f, 0.502700f },
    { -0.433800f, 0.502700f },
    { -0.556900f, 0.502700f },
    { 1.413100f, 0.625800f },
    { 1.289900f, 0.625800f },
    { 1.166800f, 0.625800f },
    { 1.043700f, 0.625800f },
    { 0.920600f, 0.625800f },
    { 0.797400f, 0.625800f },
    { 0.674300f, 0.625800f },
    { 0.551200f, 0.625800f },
    { 0.428100f, 0.625800f },
    { 0.304900f, 0.625800f },
    { 0.181800f, 0.625800f },
    { 0.058700f, 0.625800f },
    { -0.064400f, 0.625800f },
    { -0.187600f, 0.625800f },
    { -0.310700f, 0.625800f },
    { -0.433800f, 0.625800f },
    { -0.556900f, 0.625800f },
    { 1.413100f, 0.748900f },
    { 1.289900f, 0.748900f },
    { 1.166800f, 0.748900f },
    { 1.043700f, 0.748900f },
    { 0.920600f, 0.748900f },
    { 0.797400f, 0.748900f },
    { 0.674300f, 0.748900f },
    { 0.551200f, 0.748900f },
    { 0.428100f, 0.748900f },
    { 0.304900f, 0.748900f },
    { 0.181800f, 0.748900f },
    { 0.058700f, 0.748900f },
    { -0.064400f, 0.748900f },
    { -0.187600f, 0.748900f },
    { -0.310700f, 0.748900f },
    { -0.433800f, 0.748900f },
    { -0.556900f, 0.748900f },
    { 1.413100f, 0.872000f },
    { 1.289900f, 0.872000f },
    { 1.166800f, 0.872000f },
    { 1.043700f, 0.872000f },
    { 0.920600f, 0.872000f },
    { 0.797400f, 0.872000f },
    { 0.674300f, 0.872000f },
    { 0.551200f, 0.872000f },
    { 0.428100f, 0.872000f },
    { 0.304900f, 0.872000f },
    { 0.181800f, 0.872000f },
    { 0.058700f, 0.872000f },
    { -0.064400f, 0.872000f },
    { -0.187600f, 0.872000f },
    { -0.310700f, 0.872000f },
    { -0.433800f, 0.872000f },
    { -0.556900f, 0.872000f },
    { 1.413100f, 0.995200f },
    { 1.289900f, 0.995200f },
    { 1.166800f, 0.995200f },
    { 1.043700f, 0.995200f },
    { 0.920600f, 0.995200f },
    { 0.797400f, 0.995200f },
    { 0.674300f, 0.995200f },
    { 0.551200f, 0.995200f },
    { 0.428100f, 0.995200f },
    { 0.304900f, 0.995200f },
    { 0.181800f, 0.995200f },
    { 0.058700f, 0.995200f },
    { -0.064400f, 0.995200f },
    { -0.187600f, 0.995200f },
    { -0.310700f, 0.995200f },
    { -0.433800f, 0.995200f },
};

int sphere_indices [][3] = {
    { 0, 0, 0 }, { 1, 1, 1 }, { 2, 2, 2 },
    { 0, 3, 0 }, { 2, 2, 2 }, { 3, 4, 3 },
    { 0, 5, 0 }, { 3, 4, 3 }, { 4, 6, 4 },
    { 0, 7, 0 }, { 4, 6, 4 }, { 5, 8, 5 },
    { 0, 9, 0 }, { 5, 8, 5 }, { 6, 10, 6 },
    { 0, 11, 0 }, { 6, 10, 6 }, { 7, 12, 7 },
    { 0, 13, 0 }, { 7, 12, 7 }, { 8, 14, 8 },
    { 0, 15, 0 }, { 8, 14, 8 }, { 9, 16, 9 },
    { 0, 17, 0 }, { 9, 16, 9 }, { 10, 18, 10 },
    { 0, 19, 0 }, { 10, 18, 10 }, { 11, 20, 11 },
    { 0, 21, 0 }, { 11, 20, 11 }, { 12, 22, 12 },
    { 0, 23, 0 }, { 12, 22, 12 }, { 13, 24, 13 },
    { 0, 25, 0 }, { 13, 24, 13 }, { 14, 26, 14 },
    { 0, 27, 0 }, { 14, 26, 14 }, { 15, 28, 15 },
    { 0, 29, 0 }, { 15, 28, 15 }, { 16, 30, 16 },
    { 0, 31, 0 }, { 16, 30, 16 }, { 1, 32, 1 },
    { 17, 33, 17 }, { 18, 34, 18 }, { 2, 2, 2 },
    { 2, 2, 2 },    { 1, 1, 1 },    { 17, 33, 17 },
    { 18, 34, 18 }, { 19, 35, 19 }, { 3, 4, 3 },
    { 3, 4, 3 },    { 2, 2, 2 },    { 18, 34, 18 },
    { 19, 35, 19 }, { 20, 36, 20 }, { 4, 6, 4 },
    { 4, 6, 4 },    { 3, 4, 3 },    { 19, 35, 19 },
    { 20, 36, 20 }, { 21, 37, 21 }, { 5, 8, 5 },
    { 5, 8, 5 },    { 4, 6, 4 },    { 20, 36, 20 },
    { 21, 37, 21 }, { 22, 38, 22 }, { 6, 10, 6 },
    { 6, 10, 6 },   { 5, 8, 5 },    { 21, 37, 21 },
    { 22, 38, 22 }, { 23, 39, 23 }, { 7, 12, 7 },
    { 7, 12, 7 },   { 6, 10, 6 },   { 22, 38, 22 },
    { 23, 39, 23 }, { 24, 40, 24 }, { 8, 14, 8 },
    { 8, 14, 8 },   { 7, 12, 7 },   { 23, 39, 23 },
    { 24, 40, 24 }, { 25, 41, 25 }, { 9, 16, 9 },
    { 9, 16, 9 },   { 8, 14, 8 },   { 24, 40, 24 },
    { 25, 41, 25 }, { 26, 42, 26 }, { 10, 18, 10 },
    { 10, 18, 10 }, { 9, 16, 9 },   { 25, 41, 25 },
    { 26, 42, 26 }, { 27, 43, 27 }, { 11, 20, 11 },
    { 11, 20, 11 }, { 10, 18, 10 }, { 26, 42, 26 },
    { 27, 43, 27 }, { 28, 44, 28 }, { 12, 22, 12 },
    { 12, 22, 12 }, { 11, 20, 11 }, { 27, 43, 27 },
    { 28, 44, 28 }, { 29, 45, 29 }, { 13, 24, 13 },
    { 13, 24, 13 }, { 12, 22, 12 }, { 28, 44, 28 },
    { 29, 45, 29 }, { 30, 46, 30 }, { 14, 26, 14 },
    { 14, 26, 14 }, { 13, 24, 13 }, { 29, 45, 29 },
    { 30, 46, 30 }, { 31, 47, 31 }, { 15, 28, 15 },
    { 15, 28, 15 }, { 14, 26, 14 }, { 30, 46, 30 },
    { 31, 47, 31 }, { 32, 48, 32 }, { 16, 30, 16 },
    { 16, 30, 16 }, { 15, 28, 15 }, { 31, 47, 31 },
    { 32, 48, 32 }, { 17, 49, 17 }, { 1, 32, 1 },
    { 1, 32, 1 },   { 16, 30, 16 }, { 32, 48, 32 },
    { 33, 50, 33 }, { 34, 51, 34 }, { 18, 34, 18 },
    { 18, 34, 18 }, { 17, 33, 17 }, { 33, 50, 33 },
    { 34, 51, 34 }, { 35, 52, 35 }, { 19, 35, 19 },
    { 19, 35, 19 }, { 18, 34, 18 }, { 34, 51, 34 },
    { 35, 52, 35 }, { 36, 53, 36 }, { 20, 36, 20 },
    { 20, 36, 20 }, { 19, 35, 19 }, { 35, 52, 35 },
    { 36, 53, 36 }, { 37, 54, 37 }, { 21, 37, 21 },
    { 21, 37, 21 }, { 20, 36, 20 }, { 36, 53, 36 },
    { 37, 54, 37 }, { 38, 55, 38 }, { 22, 38, 22 },
    { 22, 38, 22 }, { 21, 37, 21 }, { 37, 54, 37 },
    { 38, 55, 38 }, { 39, 56, 39 }, { 23, 39, 23 },
    { 23, 39, 23 }, { 22, 38, 22 }, { 38, 55, 38 },
    { 39, 56, 39 }, { 40, 57, 40 }, { 24, 40, 24 },
    { 24, 40, 24 }, { 23, 39, 23 }, { 39, 56, 39 },
    { 40, 57, 40 }, { 41, 58, 41 }, { 25, 41, 25 },
    { 25, 41, 25 }, { 24, 40, 24 }, { 40, 57, 40 },
    { 41, 58, 41 }, { 42, 59, 42 }, { 26, 42, 26 },
    { 26, 42, 26 }, { 25, 41, 25 }, { 41, 58, 41 },
    { 42, 59, 42 }, { 43, 60, 43 }, { 27, 43, 27 },
    { 27, 43, 27 }, { 26, 42, 26 }, { 42, 59, 42 },
    { 43, 60, 43 }, { 44, 61, 44 }, { 28, 44, 28 },
    { 28, 44, 28 }, { 27, 43, 27 }, { 43, 60, 43 },
    { 44, 61, 44 }, { 45, 62, 45 }, { 29, 45, 29 },
    { 29, 45, 29 }, { 28, 44, 28 }, { 44, 61, 44 },
    { 45, 62, 45 }, { 46, 63, 46 }, { 30, 46, 30 },
    { 30, 46, 30 }, { 29, 45, 29 }, { 45, 62, 45 },
    { 46, 63, 46 }, { 47, 64, 47 }, { 31, 47, 31 },
    { 31, 47, 31 }, { 30, 46, 30 }, { 46, 63, 46 },
    { 47, 64, 47 }, { 48, 65, 48 }, { 32, 48, 32 },
    { 32, 48, 32 }, { 31, 47, 31 }, { 47, 64, 47 },
    { 48, 65, 48 }, { 33, 66, 33 }, { 17, 49, 17 },
    { 17, 49, 17 }, { 32, 48, 32 }, { 48, 65, 48 },
    { 49, 67, 49 }, { 50, 68, 50 }, { 34, 51, 34 },
    { 34, 51, 34 }, { 33, 50, 33 }, { 49, 67, 49 },
    { 50, 68, 50 }, { 51, 69, 51 }, { 35, 52, 35 },
    { 35, 52, 35 }, { 34, 51, 34 }, { 50, 68, 50 },
    { 51, 69, 51 }, { 52, 70, 52 }, { 36, 53, 36 },
    { 36, 53, 36 }, { 35, 52, 35 }, { 51, 69, 51 },
    { 52, 70, 52 }, { 53, 71, 53 }, { 37, 54, 37 },
    { 37, 54, 37 }, { 36, 53, 36 }, { 52, 70, 52 },
    { 53, 71, 53 }, { 54, 72, 54 }, { 38, 55, 38 },
    { 38, 55, 38 }, { 37, 54, 37 }, { 53, 71, 53 },
    { 54, 72, 54 }, { 55, 73, 55 }, { 39, 56, 39 },
    { 39, 56, 39 }, { 38, 55, 38 }, { 54, 72, 54 },
    { 55, 73, 55 }, { 56, 74, 56 }, { 40, 57, 40 },
    { 40, 57, 40 }, { 39, 56, 39 }, { 55, 73, 55 },
    { 56, 74, 56 }, { 57, 75, 57 }, { 41, 58, 41 },
    { 41, 58, 41 }, { 40, 57, 40 }, { 56, 74, 56 },
    { 57, 75, 57 }, { 58, 76, 58 }, { 42, 59, 42 },
    { 42, 59, 42 }, { 41, 58, 41 }, { 57, 75, 57 },
    { 58, 76, 58 }, { 59, 77, 59 }, { 43, 60, 43 },
    { 43, 60, 43 }, { 42, 59, 42 }, { 58, 76, 58 },
    { 59, 77, 59 }, { 60, 78, 60 }, { 44, 61, 44 },
    { 44, 61, 44 }, { 43, 60, 43 }, { 59, 77, 59 },
    { 60, 78, 60 }, { 61, 79, 61 }, { 45, 62, 45 },
    { 45, 62, 45 }, { 44, 61, 44 }, { 60, 78, 60 },
    { 61, 79, 61 }, { 62, 80, 62 }, { 46, 63, 46 },
    { 46, 63, 46 }, { 45, 62, 45 }, { 61, 79, 61 },
    { 62, 80, 62 }, { 63, 81, 63 }, { 47, 64, 47 },
    { 47, 64, 47 }, { 46, 63, 46 }, { 62, 80, 62 },
    { 63, 81, 63 }, { 64, 82, 64 }, { 48, 65, 48 },
    { 48, 65, 48 }, { 47, 64, 47 }, { 63, 81, 63 },
    { 64, 82, 64 }, { 49, 83, 49 }, { 33, 66, 33 },
    { 33, 66, 33 }, { 48, 65, 48 }, { 64, 82, 64 },
    { 65, 84, 65 }, { 66, 85, 66 }, { 50, 68, 50 },
    { 50, 68, 50 }, { 49, 67, 49 }, { 65, 84, 65 },
    { 66, 85, 66 }, { 67, 86, 67 }, { 51, 69, 51 },
    { 51, 69, 51 }, { 50, 68, 50 }, { 66, 85, 66 },
    { 67, 86, 67 }, { 68, 87, 68 }, { 52, 70, 52 },
    { 52, 70, 52 }, { 51, 69, 51 }, { 67, 86, 67 },
    { 68, 87, 68 }, { 69, 88, 69 }, { 53, 71, 53 },
    { 53, 71, 53 }, { 52, 70, 52 }, { 68, 87, 68 },
    { 69, 88, 69 }, { 70, 89, 70 }, { 54, 72, 54 },
    { 54, 72, 54 }, { 53, 71, 53 }, { 69, 88, 69 },
    { 70, 89, 70 }, { 71, 90, 71 }, { 55, 73, 55 },
    { 55, 73, 55 }, { 54, 72, 54 }, { 70, 89, 70 },
    { 71, 90, 71 }, { 72, 91, 72 }, { 56, 74, 56 },
    { 56, 74, 56 }, { 55, 73, 55 }, { 71, 90, 71 },
    { 72, 91, 72 }, { 73, 92, 73 }, { 57, 75, 57 },
    { 57, 75, 57 }, { 56, 74, 56 }, { 72, 91, 72 },
    { 73, 92, 73 }, { 74, 93, 74 }, { 58, 76, 58 },
    { 58, 76, 58 }, { 57, 75, 57 }, { 73, 92, 73 },
    { 74, 93, 74 }, { 75, 94, 75 }, { 59, 77, 59 },
    { 59, 77, 59 }, { 58, 76, 58 }, { 74, 93, 74 },
    { 75, 94, 75 }, { 76, 95, 76 }, { 60, 78, 60 },
    { 60, 78, 60 }, { 59, 77, 59 }, { 75, 94, 75 },
    { 76, 95, 76 }, { 77, 96, 77 }, { 61, 79, 61 },
    { 61, 79, 61 }, { 60, 78, 60 }, { 76, 95, 76 },
    { 77, 96, 77 }, { 78, 97, 78 }, { 62, 80, 62 },
    { 62, 80, 62 }, { 61, 79, 61 }, { 77, 96, 77 },
    { 78, 97, 78 }, { 79, 98, 79 }, { 63, 81, 63 },
    { 63, 81, 63 }, { 62, 80, 62 }, { 78, 97, 78 },
    { 79, 98, 79 }, { 80, 99, 80 }, { 64, 82, 64 },
    { 64, 82, 64 }, { 63, 81, 63 }, { 79, 98, 79 },
    { 80, 99, 80 }, { 65, 100, 65 }, { 49, 83, 49 },
    { 49, 83, 49 }, { 64, 82, 64 },  { 80, 99, 80 },
    { 81, 101, 81 }, { 82, 102, 82 }, { 66, 85, 66 },
    { 66, 85, 66 },  { 65, 84, 65 },  { 81, 101, 81 },
    { 82, 102, 82 }, { 83, 103, 83 }, { 67, 86, 67 },
    { 67, 86, 67 },  { 66, 85, 66 },  { 82, 102, 82 },
    { 83, 103, 83 }, { 84, 104, 84 }, { 68, 87, 68 },
    { 68, 87, 68 },  { 67, 86, 67 },  { 83, 103, 83 },
    { 84, 104, 84 }, { 85, 105, 85 }, { 69, 88, 69 },
    { 69, 88, 69 },  { 68, 87, 68 },  { 84, 104, 84 },
    { 85, 105, 85 }, { 86, 106, 86 }, { 70, 89, 70 },
    { 70, 89, 70 },  { 69, 88, 69 },  { 85, 105, 85 },
    { 86, 106, 86 }, { 87, 107, 87 }, { 71, 90, 71 },
    { 71, 90, 71 },  { 70, 89, 70 },  { 86, 106, 86 },
    { 87, 107, 87 }, { 88, 108, 88 }, { 72, 91, 72 },
    { 72, 91, 72 },  { 71, 90, 71 },  { 87, 107, 87 },
    { 88, 108, 88 }, { 89, 109, 89 }, { 73, 92, 73 },
    { 73, 92, 73 },  { 72, 91, 72 },  { 88, 108, 88 },
    { 89, 109, 89 }, { 90, 110, 90 }, { 74, 93, 74 },
    { 74, 93, 74 },  { 73, 92, 73 },  { 89, 109, 89 },
    { 90, 110, 90 }, { 91, 111, 91 }, { 75, 94, 75 },
    { 75, 94, 75 },  { 74, 93, 74 },  { 90, 110, 90 },
    { 91, 111, 91 }, { 92, 112, 92 }, { 76, 95, 76 },
    { 76, 95, 76 },  { 75, 94, 75 },  { 91, 111, 91 },
    { 92, 112, 92 }, { 93, 113, 93 }, { 77, 96, 77 },
    { 77, 96, 77 },  { 76, 95, 76 },  { 92, 112, 92 },
    { 93, 113, 93 }, { 94, 114, 94 }, { 78, 97, 78 },
    { 78, 97, 78 },  { 77, 96, 77 },  { 93, 113, 93 },
    { 94, 114, 94 }, { 95, 115, 95 }, { 79, 98, 79 },
    { 79, 98, 79 },  { 78, 97, 78 },  { 94, 114, 94 },
    { 95, 115, 95 }, { 96, 116, 96 }, { 80, 99, 80 },
    { 80, 99, 80 },  { 79, 98, 79 },  { 95, 115, 95 },
    { 96, 116, 96 }, { 81, 117, 81 }, { 65, 100, 65 },
    { 65, 100, 65 }, { 80, 99, 80 },  { 96, 116, 96 },
    { 97, 118, 97 }, { 98, 119, 98 }, { 82, 102, 82 },
    { 82, 102, 82 }, { 81, 101, 81 }, { 97, 118, 97 },
    { 98, 119, 98 }, { 99, 120, 99 }, { 83, 103, 83 },
    { 83, 103, 83 }, { 82, 102, 82 }, { 98, 119, 98 },
    { 99, 120, 99 }, { 100, 121, 100 }, { 84, 104, 84 },
    { 84, 104, 84 }, { 83, 103, 83 },   { 99, 120, 99 },
    { 100, 121, 100 }, { 101, 122, 101 }, { 85, 105, 85 },
    { 85, 105, 85 },   { 84, 104, 84 },   { 100, 121, 100 },
    { 101, 122, 101 }, { 102, 123, 102 }, { 86, 106, 86, },
    { 86, 106, 86 },   { 85, 105, 85 },   { 101, 122, 101 },
    { 102, 123, 102 }, { 103, 124, 103 }, { 87, 107, 87, },
    { 87, 107, 87 },   { 86, 106, 86 },   { 102, 123, 102 },
    { 103, 124, 103 }, { 104, 125, 104 }, { 88, 108, 88, },
    { 88, 108, 88 },   { 87, 107, 87 },   { 103, 124, 103 },
    { 104, 125, 104 }, { 105, 126, 105 }, { 89, 109, 89 },
    { 89, 109, 89 },   { 88, 108, 88 },   { 104, 125, 104 },
    { 105, 126, 105 }, { 106, 127, 106 }, { 90, 110, 90 },
    { 90, 110, 90 },   { 89, 109, 89 },   { 105, 126, 105 },
    { 106, 127, 106 }, { 107, 128, 107 }, { 91, 111, 91 },
    { 91, 111, 91 },   { 90, 110, 90 },   { 106, 127, 106 },
    { 107, 128, 107 }, { 108, 129, 108 }, { 92, 112, 92 },
    { 92, 112, 92 },   { 91, 111, 91 },   { 107, 128, 107 },
    { 108, 129, 108 }, { 109, 130, 109 }, { 93, 113, 93 },
    { 93, 113, 93 },   { 92, 112, 92 },   { 108, 129, 108 },
    { 109, 130, 109 }, { 110, 131, 110 }, { 94, 114, 94 },
    { 94, 114, 94 },   { 93, 113, 93 },   { 109, 130, 109 },
    { 110, 131, 110 }, { 111, 132, 111 }, { 95, 115, 95 },
    { 95, 115, 95 },   { 94, 114, 94 },   { 110, 131, 110 },
    { 111, 132, 111 }, { 112, 133, 112 }, { 96, 116, 96 },
    { 96, 116, 96 },   { 95, 115, 95 },   { 111, 132, 111 },
    { 112, 133, 112 }, { 97, 134, 97 },   { 81, 117, 81 },
    { 81, 117, 81 },   { 96, 116, 96 },   { 112, 133, 112 },
    { 113, 135, 113 }, { 98, 119, 98 },   { 97, 118, 97 },
    { 113, 136, 113 }, { 99, 120, 99 },   { 98, 119, 98 },
    { 113, 137, 113 }, { 100, 121, 100 }, { 99, 120, 99 },
    { 113, 138, 113 }, { 101, 122, 101 }, { 100, 121, 100 },
    { 113, 139, 113 }, { 102, 123, 102 }, { 101, 122, 101 },
    { 113, 140, 113 }, { 103, 124, 103 }, { 102, 123, 102 },
    { 113, 141, 113 }, { 104, 125, 104 }, { 103, 124, 103 },
    { 113, 142, 113 }, { 105, 126, 105 }, { 104, 125, 104 },
    { 113, 143, 113 }, { 106, 127, 106 }, { 105, 126, 105 },
    { 113, 144, 113 }, { 107, 128, 107 }, { 106, 127, 106 },
    { 113, 145, 113 }, { 108, 129, 108 }, { 107, 128, 107 },
    { 113, 146, 113 }, { 109, 130, 109 }, { 108, 129, 108 },
    { 113, 147, 113 }, { 110, 131, 110 }, { 109, 130, 109 },
    { 113, 148, 113 }, { 111, 132, 111 }, { 110, 131, 110 },
    { 113, 149, 113 }, { 112, 133, 112 }, { 111, 132, 111 },
    { 113, 150, 113 }, { 97, 134, 97 }, { 112, 133, 112 },
};

float plane_vertices [][3] = {
    { -10.0f, 0.0f, -10.0f },
    { -10.0f, 0.0f, 10.0f },
    { 10.0f, 0.0f, 10.0f },
    { 10.0f, 0.0f, -10.0f },
};

float plane_normals [][3] = {
    { 0.0f, 1.0f, 0.0f },
    { 0.0f, 1.0f, 0.0f },
    { 0.0f, 1.0f, 0.0f },
    { 0.0f, 1.0f, 0.0f },
};

float plane_texcoords [][2] = {
    { 0.0f, 1.0f },
    { 0.0f, 0.0f },
    { 1.0f, 0.0f },
    { 1.0f, 1.0f },
};

int plane_indices [][3] = {
    { 0, 0, 0}, { 1, 1, 1}, { 2, 2, 2},
    { 0, 0, 0}, { 2, 2, 2}, { 3, 3, 3},
};

float quad_texcoords [][2] = {
    { 0.0f, 1.0f },
    { 0.0f, 0.0f },
    { 1.0f, 1.0f },
    { 1.0f, 0.0f },
};

int quad_indices [][3] = {
    { 0, 0, 0}, { 1, 1, 1}, { 2, 2, 2},
    { 2, 2, 2}, { 1, 1, 1}, { 3, 3, 3},
};

float quad_vertices [][3] = {
    { -1.0f, 1.0f, 0.0f },
    { -1.0f, -1.0f, 0.0f },
    { 1.0f, 1.0f, 0.0f },
    { 1.0f, -1.0f, 0.0f },
};

unsigned int    sphere_VBO;
unsigned int    plane_VBO;
unsigned int    quad_VBO;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GenerateGeometry                                                                                          //
//                                                                                                           //
// Generates data required for drawing geometry with OpenGL                                                  //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CreateGeometry() {
    // Generate sphere
    GenerateMesh( sizeof(sphere_indices)/sizeof(sphere_indices[0]), &sphere_indices[0][0], &sphere_vertices[0][0], &sphere_texcoords[0][0], &sphere_normals[0][0], GSphereVAO, sphere_VBO );
    // Generate plane
    GenerateMesh( sizeof(plane_indices)/sizeof(plane_indices[0]), &plane_indices[0][0], &plane_vertices[0][0], &plane_texcoords[0][0], &plane_normals[0][0], GPlaneVAO, plane_VBO );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GenerateMesh                                                                                              //
//                                                                                                           //
// Fills OpenGL buffers used for drawing with mesh data                                                      //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void GenerateMesh( const size_t  i_Count,
                          const int*    i_Indices,
                          const float*  i_Vertices,
                          const float*  i_Texcoords,
                          const float*  i_Normals,
                          unsigned int& io_VAO,
                          unsigned int& io_VBO ) {
    // Prepare array for all vertex data
    std::vector<float> vertex_buffer_data;
    vertex_buffer_data.resize( i_Count * 8 );

    // Copy vertex data into one table
    for( size_t i=0; i<i_Count; ++i ) {
        size_t ind_n = 3 * i_Indices[3*i + 0];
        size_t ind_t = 2 * i_Indices[3*i + 1];
        size_t ind_v = 3 * i_Indices[3*i + 2];

        vertex_buffer_data[8*i+0] = i_Normals[ind_n + 0];
        vertex_buffer_data[8*i+1] = i_Normals[ind_n + 1];
        vertex_buffer_data[8*i+2] = i_Normals[ind_n + 2];
        vertex_buffer_data[8*i+3] = i_Texcoords[ind_t + 0];
        vertex_buffer_data[8*i+4] = i_Texcoords[ind_t + 1];
        vertex_buffer_data[8*i+5] = i_Vertices[ind_v + 0];
        vertex_buffer_data[8*i+6] = i_Vertices[ind_v + 1];
        vertex_buffer_data[8*i+7] = i_Vertices[ind_v + 2];
    }

    // Generate vertex array object and vertex buffer object
    glGenVertexArrays( 1, &io_VAO );
    glGenBuffers( 1, &io_VBO );

    // Bind vao, vbo and load vertex data onto graphics card memory
    glBindVertexArray( io_VAO );
    glBindBuffer( GL_ARRAY_BUFFER, io_VBO );
    glBufferData( GL_ARRAY_BUFFER, vertex_buffer_data.size() * sizeof(float), &vertex_buffer_data[0], GL_STATIC_DRAW );

    // 12a. Verify below which attribute is provided through which channel (check index and offsets inside vertex_buffer_data)
    // ...
    // Bind vertex attributes with proper attribute indices
    glVertexAttribPointer( 2, 3, GL_FLOAT, GL_FALSE, 32, (float*)(0*sizeof(float)) );
    glVertexAttribPointer( 1, 2, GL_FLOAT, GL_FALSE, 32, (float*)(3*sizeof(float)) );
    glVertexAttribPointer( 0, 3, GL_FLOAT, GL_FALSE, 32, (float*)(5*sizeof(float)) );

    // Enable vertex attributes associated with loaded vertex data
    glEnableVertexAttribArray( 2 );
    glEnableVertexAttribArray( 1 );
    glEnableVertexAttribArray( 0 );

    // Disable vao, vbo and attributes
    glBindVertexArray( 0 );
    glBindBuffer( GL_ARRAY_BUFFER, 0 );
    glDisableVertexAttribArray( 2 );
    glDisableVertexAttribArray( 1 );
    glDisableVertexAttribArray( 0 );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GenerateQuad                                                                                              //
//                                                                                                           //
// Generates fullscreen quad used during postprocess drawing phase                                           //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CreateFullscreenQuad( const float i_Width, const float i_Height ) {
    // If window was resized data is already created and it needs to be deleted
    glDeleteBuffers( 1, &quad_VBO );
    glDeleteVertexArrays( 1, &GQuadVAO );

    // Prepare texture coordinates for RECT textures
    float quad_texcoords2 [][3] = {
        { 0.0f,    i_Height, 0.0f },
        { 0.0f,    0.0f,     0.0f },
        { i_Width, i_Height, 0.0f },
        { i_Width, 0.0f,     0.0f },
    };

    // Generate fullscreen quad mesh
    GenerateMesh( sizeof(quad_indices)/sizeof(quad_indices[0]), &quad_indices[0][0], &quad_vertices[0][0], &quad_texcoords[0][0], &quad_texcoords2[0][0], GQuadVAO, quad_VBO );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DestroyGeometry                                                                                           //
//                                                                                                           //
// Deletes all OpenGL data used for drawing                                                                  //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DestroyGeometry() {
    glDeleteBuffers( 1, &sphere_VBO );
    glDeleteVertexArrays( 1, &GSphereVAO );
    glDeleteBuffers( 1, &plane_VBO );
    glDeleteVertexArrays( 1, &GPlaneVAO );
    glDeleteBuffers( 1, &quad_VBO );
    glDeleteVertexArrays( 1, &GQuadVAO );
}
