#version 140
precision highp float;

in vec4 inPosition;


// 5. Add texture coordinates vertex attribute
// ...
in vec2 inTexCoord;
// 9. Add another vertex attribute for normal vector 
// ...
in vec3 inNormal;
// 6a. Create new output channel for texture coordinates
// ...
out vec2 TexCoord;
// 10a. Create new output channel for normal vector
// ...
out vec3 Normal;
// 25a. Create new output channel for vertex position
// ...
out vec3 Position;
uniform mat4 uMVPMatrix;
uniform mat4 uModelViewMatrix;

void main()
{
	gl_Position = uMVPMatrix * inPosition;

	// 6b. Pass texture coordinates to fragment shader in a newly created output channel
	// ...
	TexCoord = inTexCoord;
	// 10b. Pass normal vector to fragment shader
	// Transform normal vector into view space with model-view matrix
	// ...
	Normal = (mat3(uModelViewMatrix)) * inNormal;
	// 25b. Convert vertex position into view space using Model-View matrix
	// ...
	Position = (vec4(uModelViewMatrix* inPosition)).xyz;
	// 25c. Store view space vertex position in newly created channel
	// ...
}
